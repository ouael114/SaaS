{"remainingRequest":"C:\\Users\\asus\\Desktop\\Final One\\vue-material-dashboard-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\asus\\Desktop\\Final One\\vue-material-dashboard-master\\src\\pages\\HomeP.vue?vue&type=template&id=0d6a0246&scoped=true&","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\Final One\\vue-material-dashboard-master\\src\\pages\\HomeP.vue","mtime":1652977040544},{"path":"C:\\Users\\asus\\Desktop\\Final One\\vue-material-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652976208441},{"path":"C:\\Users\\asus\\Desktop\\Final One\\vue-material-dashboard-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1652976222707},{"path":"C:\\Users\\asus\\Desktop\\Final One\\vue-material-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652976208441},{"path":"C:\\Users\\asus\\Desktop\\Final One\\vue-material-dashboard-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1652976217296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}